### Rotating Drum Simulation
# This simulation involves the filling of a rotary drum with a binary mixture.
# The mixture is initially segregated by a divider. The drum is rotated
# horizontally and vibrated to spread the particles equally along the length of 
# the drum. The divider is removed before the drum is rotated along its 
# longitudinal axis 


#echo log
#modify_timing on


################################################################################
################################################################################
### Initialisation
################################################################################
################################################################################



################################################################################
## Initialisation - Import Parameters from data.head
################################################################################

print "----> Importing Variables..."
include data.head


################################################################################
## Initialisation - Preliminaries
################################################################################

# Atom Stype Properties
atom_style  sphere               # Spherical atom style in simulation
variable atommod equal ${neighdim}/2
atom_modify sort 1000 ${atommod} # Spatial sorting of atoms every N time-steps

# Boundary Style of Simulation Domain
if "(${simdim} == 2) && (${periodicbb} == 1)" then "boundary f p f" &
	else "boundary f f f" # f -> non-periodic, fixed; p -> periodic

# Newton's 3rd Law
newton	    off             # Off for DEM sim with only short-range interactions

# Style of Inter-processor Communication
communicate single vel yes  # Proc gets info on ghost atoms outside sub-domain 

# Set Units
units       si              # SI units (ie kg, m, s)

# Drum Length
if "${simdim} == 2" then "variable lengthdrum equal ${lengthdrum2D}" else &
	"variable lengthdrum equal ${lengthdrum3D}"

# Processor Layout
if "${autoproc} == 1" then "processors * * *" &
elif "${xproc} == 0"       "processors * ${yproc} ${zproc}" &
elif "${yproc} == 0"       "processors ${xproc} * ${zproc}" &
elif "${zproc} == 0"       "processors ${xproc} ${yproc} *" &
else "processors ${xproc} ${yproc} ${zproc}"

# Neighbour Listing
neighbor     ${neighdim} bin # Size of neighbour list, default for SI 0.001 m.
# Algorithm used to build list is bin, scales with # of atoms/# of processors
neigh_modify delay 0 # How often neighbour list is calcuated 


################################################################################
## Initialisation - Declare Domain
################################################################################

# Domain Limits
variable limit1    equal (${widthdrum}/2)+0.03
variable limit2    equal ${thickcap}
variable limit3    equal ${lengthdrum}+0.1
variable limit4    equal ${thickcap}+${yamplitude}+0.01
variable limit5    equal ${lengthdrum}+${yamplitude}

variable limittest equal ${lengthdrum}+${thickcap}+0.01

if "${limit1} > ${limittest}" then "variable limit6 equal ${limit1}" &
	else "variable limit6 equal ${limittest}"

variable limit7    equal ${thickcap}+${yamplitude}+${lengthdrum}+0.01
variable limit8    equal ${lengthdrum}+0.02

# Limits for Periodic Domain
variable limit9    equal ${lengthdrum}
variable limit10   equal 0

## Simulation Domain
region domain block -${limit1} ${limit1} -${limit1} ${limit1} &
-${limit2} ${limit3} units box # x,x,y,y,z,z (m)
create_box	3 domain # 3 different material types (PP, glass, PMMA) 


################################################################################
## Initialisation - Material and Interaction Properties (PP --> glass --> PMMA)
################################################################################

# Young's Modulus
fix m1 all property/global youngsModulus peratomtype &
${ymPP} ${ymglass} ${ymPMMA}
hard_particles yes # Allow for Youngs Modulus > 1e9 Pa

# Poisson's Ratio
fix m2 all property/global poissonsRatio peratomtype &
${prPP} ${prglass} ${prPMMA}

# Coefficient of Restitution
fix m3 all property/global coefficientRestitution peratomtypepair 3 &
${restPPPP}    ${restglassPP}    ${restPPPMMA} &
${restglassPP} ${restglassglass} ${restglassPMMA} & 
${restPPPMMA}  ${restglassPMMA}  ${restPMMAPMMA}

# Coefficient of Friction
fix m4 all property/global coefficientFriction peratomtypepair 3 &
${frictPPPP}    ${frictglassPP}    ${frictPPPMMA} &
${frictglassPP} ${frictglassglass} ${frictglassPMMA} &
${frictPPPMMA}  ${frictglassPMMA}  ${frictPMMAPMMA}

# Coefficient of Rolling Friction
fix m5 all property/global coefficientRollingFriction peratomtypepair 3 &
${rollPPPP}    ${rollglassPP}    ${rollPPPMMA} &
${rollglassPP} ${rollglassglass} ${rollglassPMMA} &
${rollPPPMMA}  ${rollglassPMMA}  ${rollPMMAPMMA}

# Particle Diameter
variable diaglass equal 2*${radglass}
variable diaPP    equal 2*${radPP}


################################################################################
## Initialisation - Particle Insertion 
################################################################################

# Number of Particles based on filling degree (assume same radius)
variable totalparticles equal (3/4)*(${fillingdegree}*(1-${porosity}))*((((${iddrum}/2)^2)*${lengthdrum})/(${radPP}^3))
variable numglass equal floor(${volfracglass}*${totalparticles}) # Glass
variable numPP equal floor(${volfracPP}*${totalparticles})       # PP

# Particle Template
fix pts1 all particletemplate/sphere 123457   atom_type 1 density constant &
${denPP}    radius constant ${radPP}    # PP particles
fix pts2 all particletemplate/sphere 15485863 atom_type 2 density constant &
${denglass} radius constant ${radglass} # Glass particles

# Particle Distributions
fix pdd1 all particledistribution/discrete 8593931  1 pts1 1.0
fix pdd2 all particledistribution/discrete 15485867 1 pts2 1.0

# Particle Insertion Velocity
if "${simdim} == 2" then "variable particleVel equal -0.02" else &
	"variable particleVel equal -1" # Slower for 2D to minimise bouncing

# Region of Insertion (cad1 - PP)
fix cad1 all mesh/surface file meshes/factory_input1.stl type 3 scale 0.01 &
move 0.005 0 ${limit8}
fix ins1 all insert/stream seed 32452843 distributiontemplate pdd1 &
nparticles ${numPP} particlerate ${insertionrate} overlapcheck yes &
vel constant 0 0 ${particleVel} insertion_face cad1 extrude_length 0.05

# Region of Insertion (cad2 - Glass)
fix cad2 all mesh/surface file meshes/factory_input2.stl type 3 scale 0.01 &
rotate axis 0 0 1 angle 180 move -0.005 0 ${limit8} 
fix ins2 all insert/stream seed 32452843 distributiontemplate pdd2 &
nparticles ${numglass} particlerate ${insertionrate} overlapcheck yes &
vel constant 0 0 ${particleVel} insertion_face cad2 extrude_length 0.05


################################################################################
## Initialisation - Import Mesh from CAD file as Atom Type 3 (PMMA)
################################################################################

# Import 2D/3D Drum (cad3)
if "${simdim} == 2" then "fix cad3 all mesh/surface &
	file meshes/rotating_drum2D.stl type 3 scale 0.001" else &
	"fix cad3 all mesh/surface file meshes/rotating_drum.stl &
	type 3 scale 0.001"

# Import Bottom Lid (cad4)
fix cad4 all mesh/surface file meshes/bottom_lid_with_slit.stl type 3 &
scale 0.001 move 0 0 -0.01

# Import 2D/3D Divider (cad5)
if "${simdim} == 2" then "fix cad5 all mesh/surface file meshes/divider2D.stl &
	type 3 scale 0.001 move 0 0 0" else &
	"fix cad5 all mesh/surface file meshes/divider.stl type 3 scale 0.001 &
	move 0 0 0"

# Import Top Lid (cad6)
fix cad6 all mesh/surface file meshes/top_lid.stl type 3 scale 0.001 &
move 0 0 ${lengthdrum}

# Contact Model for Geometry
fix geometry all wall/gran model hertz tangential history &
rolling_friction epsd2 mesh n_meshes 3 meshes cad3 cad4 cad5


################################################################################
## Initialisation - Detailed Settings
################################################################################

# Define Physics
pair_style gran model hertz tangential history cohesion off &
	rolling_friction epsd2 surface default
# Hertz without cohesion inc rolling friction
pair_coeff * *       # Indicate all particles interact via granular potential

# Integrator
fix integrate all nve/sphere # Constant number, volume, energy

# Gravity
fix grav all gravity 9.81 vector 0.0 0.0 -1.0 # Gravity in z-direction

# Time-step Size
timestep ${ts} # Less than, equal to 20% of Rayleigh time-step

# Current Time-step
variable now equal step # When referred to as 'v_now' gives current time-step

# Thermodynamic Output Settings
variable        thermofreq equal round(${thermostep}/${ts}) # (time-steps)
compute		cp1 all erotate/sphere
thermo_style	custom step atoms ke c_cp1 spcpu vol
thermo          ${thermofreq}
thermo_modify	lost warn norm no flush yes
# Check for lost atoms, thermo not normalised

# Check Time-step Size, Initialise Dump File
fix ts_check all check/timestep/gran 1 0.01 0.01
run 1
unfix ts_check

# Record Rotational Velocity of Drum
variable omegaiter equal 0 # Initial rotational speed of drum (time-step = 1)

# Initial Conditions Geometry/Particle/Image Dump
write_dump all custom/vtk post/particles_*.vtk &
id type radius x y z vx vy vz fx fy fz omegax omegay omegaz tqx tqy tqz
write_dump all mesh/stl post/dump_factory_*.stl cad1 cad2
write_dump all mesh/stl post/dump_drum_*.stl cad3 cad5
write_dump all mesh/stl post/dump_ends_*.stl cad4
print "${omegaiter}" screen no append post/drum_rotational_velocity.txt

# Create Periodic Geometry/Particle/Image Dump
dump dumpstl0 all custom/vtk ${thermofreq} post/particles_*.vtk &
id type radius x y z vx vy vz fx fy fz omegax omegay omegaz tqx tqy tqz
dump dumpstl2 all mesh/stl   ${thermofreq} post/dump_factory_*.stl cad1 cad2
dump dumpstl3 all mesh/stl   ${thermofreq} post/dump_drum_*.stl cad3 cad5
dump dumpstl4 all mesh/stl   ${thermofreq} post/dump_ends_*.stl cad4 

# Writing Drum Rotational Speed to File
fix rotdrum all print ${thermofreq} "${omegaiter}" screen no &
title none append post/drum_rotational_velocity.txt

# Initial Imaging Command (1)
include imaging/imaging1.data



################################################################################
################################################################################
### Execution
################################################################################
################################################################################



################################################################################
## Execution - Filling Drum
################################################################################

# Filling Run Time 
if "${numglass} > ${numPP}" then "variable num equal ${numglass}" &
	else "variable num equal ${numPP}"
variable runsteps equal &
	round((0.2/${ts})+((${numPP}/${insertionrate})/${ts})) # (time-steps)

# Run Simulation
print "----> Filling Drum..."
run ${runsteps}

# Print System Information
info communication time out log 


## Check if all Particles in Drum
if "${simdim} == 2" then "variable runsteps equal round(1/${ts})" else &
	"variable runsteps equal round(0.1/${ts})" # (1 or 0.1 seconds)
variable position1 equal bound(all,zmax)

# Addition Run Time for Filling Loop
label loop1
	print "----> Checking Particle Position..."
	if "${position1} < ${lengthdrum}" &
	then "print '----> All particles in drum...' " &
	"jump in.rotatingdrum endloop1"

	# Run Simulation
	print "----> Particles not all in drum, continuing loop..."	
	run ${runsteps} # Check position again in 1 or 0.1 seconds

jump in.rotatingdrum loop1
label endloop1


## Add Top Lid to Drum
print "----> Adding Top to Drum..."

# Remove Geometry Contact Model, Dump Commands
unfix geometry
undump dumpstl2
undump dumpstl3
undump dumpstl4

# New Contact Model for Geometry, New Dump Commands
fix geometry all wall/gran model hertz tangential history &
rolling_friction epsd2 mesh n_meshes 4 meshes cad3 cad4 cad5 cad6
dump dumpstl5 all mesh/stl ${thermofreq} post/dump_drum_*.stl cad3 cad5
dump dumpstl6 all mesh/stl ${thermofreq} post/dump_ends_*.stl cad4 cad6

# Remove Region of Insertion from Simulation (cad1, cad2)
unfix ins2
unfix ins1
unfix cad1
unfix cad2


################################################################################
## Execution - Allow Particles to Settle (1)
################################################################################

# Settling Run Time
variable settle equal 1.5                      # (seconds)
variable runsteps equal round(${settle}/${ts}) # (time-steps)

# New Imaging Command (2)
include imaging/imaging2.data

# Run Simulation 
print "----> Allowing Particles to Settle (1)..."
run ${runsteps}

# Print System Information
info communication time out log 

# Additional Run Time to Prevent System Error
run 1 # This run command is required for some reason

# Change Domain Limits
change_box all y final -${limit6} ${limit1} units box 
change_box all z final -${limit1} ${limit3} units box

# New Imaging Command (3)
include imaging/imaging3.data

# Create Restart File
print "----> Writing Restart File (1)..."
write_restart restart/1_filled_drum.restart


################################################################################
## Execution - Rotating Drum to Horizontal Position
################################################################################

# Angular Velocity of Drum Rotation
variable omega1 equal PI/(2*${rottime}) # (rad/s)

# Rotate Geometry
fix movecad1 all move/mesh mesh cad3 rotate/variable origin 0 0 0 &
axis 1 0 0 omega v_omega1
fix movecad2 all move/mesh mesh cad4 rotate/variable origin 0 0 0 &
axis 1 0 0 omega v_omega1
fix movecad3 all move/mesh mesh cad5 rotate/variable origin 0 0 0 &
axis 1 0 0 omega v_omega1
fix movecad4 all move/mesh mesh cad6 rotate/variable origin 0 0 0 &
axis 1 0 0 omega v_omega1

# Rotation Run Time
variable runsteps equal round(${rottime}/${ts}) # (time-steps)

# Run Simulation
print "----> Rotating Drum to Horizontal Position..."
run ${runsteps}

# Print System Information
info communication time out log 

## Stop Rotation of Geometry
unfix movecad1 
unfix movecad2 
unfix movecad3 
unfix movecad4

# Additional Run Time to Prevent System Error
run 1

# Change Domain Limits
change_box all x final -${limit1} ${limit1} units box 
change_box all y final -${limit7} ${limit4} units box
change_box all z final -${limit1} ${limit1} units box

# New Imaging Command (4)
include imaging/imaging4.data


################################################################################
## Execution - Allow Particles to Settle (2)
################################################################################

# Settling Run Time
variable settle equal 1                        # (seconds)
variable runsteps equal round(${settle}/${ts}) # (time-steps)

# Run Simulation
print "----> Allowing Particles to Settle (2)..."
run ${runsteps}

# Print System Information
info communication time out log 

# Create Restart File
print "----> Writing Restart File..."
write_restart restart/2_pre_vibrate.restart


################################################################################
## Execution - Level Particles (Longitudinal Rotation of Drum)
################################################################################

# Period of Drum Rotation
variable periodrotMix equal 60/${rpmMix}        # (seconds)

# Angular Velocity of Drum Rotation
variable omegaiter equal (2*PI)/${periodrotMix} # (rad/s)

# Rotate Geometry
fix movecad1 all move/mesh mesh cad3 rotate origin 0 0 0 axis 0 1 0 & 
period ${periodrotMix}
fix movecad2 all move/mesh mesh cad4 rotate origin 0 0 0 axis 0 1 0 & 
period ${periodrotMix}
fix movecad3 all move/mesh mesh cad5 rotate origin 0 0 0 axis 0 1 0 & 
period ${periodrotMix}
fix movecad4 all move/mesh mesh cad6 rotate origin 0 0 0 axis 0 1 0 & 
period ${periodrotMix}

# Rotation Run Time
variable runsteps equal &
	round((${periodrotMix}*${numrotMix})/${ts}) # (time-steps)

# Run Simulation
print "----> Rotating drum to horizontal position..." 
run ${runsteps}

# Print System Information
info communication time out log 

# Stop Rotation of Geometry
unfix movecad1
unfix movecad2
unfix movecad3
unfix movecad4

# Reset Angular Velocity of Drum 
variable omegaiter equal 0

################################################################################
## Execution - Allow Particles to Settle (3)
################################################################################

# Settling Run Time
variable settle equal 0.5                      # (seconds)
variable runsteps equal round(${settle}/${ts}) # (time-steps)

# Run Simulation 
print "----> Allowing Particles to Settle (3)..."
run ${runsteps}

# Print System Information
info communication time out log 


################################################################################
## Execution - Level Particles (Vibrate Drum)
################################################################################

# Period of Drum Vibration
variable periodvib equal 1/${frequencyvib} # (seconds)

# Vibrate Geometry
fix movecad1 all move/mesh mesh cad3 wiggle amplitude ${xamplitude} &
${yamplitude} ${zamplitude} period ${periodvib}
fix movecad2 all move/mesh mesh cad4 wiggle amplitude ${xamplitude} &
${yamplitude} ${zamplitude} period ${periodvib}
fix movecad3 all move/mesh mesh cad5 wiggle amplitude ${xamplitude} &
${yamplitude} ${zamplitude} period ${periodvib}
fix movecad4 all move/mesh mesh cad6 wiggle amplitude ${xamplitude} &
${yamplitude} ${zamplitude} period ${periodvib}

# Vibration Run Time
variable runsteps equal round(${cyclevib}*${periodvib}/${ts}) # (time-steps)

# Run Simulation
print "----> Vibrating Drum..."
run ${runsteps}

# Print System Information
info communication time out log 

# Stop Vibration of Geometry
unfix movecad1
unfix movecad2
unfix movecad3
unfix movecad4


################################################################################
## Execution - Allow Particles to Settle (4)
################################################################################

# New Imaging Command (5)
include imaging/imaging5.data

# Settling Run Time
variable settle equal 1.5                      # (seconds)
variable runsteps equal round(${settle}/${ts}) # (time-steps)

# Run Simulation
print "----> Allowing Particles to Settle (4)..."
run ${runsteps}

# Print System Information
info communication time out log 

# Change Domain Limits
change_box all y final -${limit7} ${limit5} units box

# Create Restart File
print "----> Writing Restart File..."
write_restart restart/3_post_vibrate.restart

# New Imaging Command (6)
include imaging/imaging6.data

# Additional Run Time to Prevent System Error
run 1


################################################################################
## Execution - Remove Divider 
################################################################################

# Remove Divider
fix movecad1 all move/mesh mesh cad5 linear 0 ${dividerspeed} 0 

# Removing Divider Run Time
variable divdist equal ${lengthdrum} # 
variable runsteps equal round((${divdist}/${dividerspeed})/${ts}) # (time-steps)

# Run Simulation
print "----> Removing Divider..."
run ${runsteps}

# Print System Information
info communication time out log 

# Stop Divider Movement
unfix movecad1

# Remove Geometry Contact Model, Dump Commands
unfix geometry
undump dumpstl5
undump dumpstl6

# Remove Divider from Simulation (cad5)
unfix cad5

# Remove Top, Bottom Lid from Simulation if 2D Drum with Periodic Domain Used
if "(${simdim} == 2) && (${periodicbb} == 1)" then &
	"unfix cad4" &
	"unfix cad6" &
	"fix geometry all wall/gran model hertz tangential history &
	rolling_friction epsd2 mesh n_meshes 1 meshes cad3" &
	"dump dumpstl7 all mesh/stl ${thermofreq} post/dump_drum_*.stl cad3" &
	"run 1" &
	"change_box all y final -${limit9} ${limit10} units box" &
else "fix geometry all wall/gran model hertz tangential history &
	rolling_friction epsd2 mesh n_meshes 3 meshes cad3 cad4 cad6" &
	"dump dumpstl7 all mesh/stl ${thermofreq} post/dump_drum_*.stl cad3" &
   "dump dumpstl8 all mesh/stl ${thermofreq} post/dump_ends_*.stl cad4 cad6" &
	"run 1" &
	"change_box all y final -${limit7} ${limit4} units box"

# New Imaging Command (7)
include imaging/imaging7.data


################################################################################
## Execution - Allow Particles to Settle (5)
################################################################################

# Settling Run Time
variable settle equal 1                        # (seconds)
variable runsteps equal round(${settle}/${ts}) # (time-steps)

# Run Simulation 
print "----> Allowing Particles to Settle (5)..."
run ${runsteps}

# Print System Information
info communication time out log 


################################################################################
## Execution -Set Time-Step to be Multiple of 'thermofreq'
################################################################################

# Obtain Required Run Time
variable test equal step/${thermofreq}        # (-)
variable test equal ceil(${test})             # (-)
variable runsteps equal ${thermofreq}*${test} # (run-steps)

# Run Simulation 
print "----> Run Simulation to Make ..."
run ${runsteps} upto

# New Imaging Command (8)
include imaging/imaging8.data

# New Imaging Command (restart)
include imaging/imaging_restart.data

# Create Restart File
print "----> Writing Restart File..."

if "(${simdim} == 2) && (${periodicbb} == 1)" then &
"write_restart restart/2D_periodic.restart" &
elif "(${simdim} == 2) && (${periodicbb} == 0)" &
"write_restart restart/2D_non_periodic.restart" else &
"write_restart restart/3D.restart"


################################################################################
## Execution - Rotation of Drum Around Longitudinal Axis
################################################################################

# Record Current Time-Step to File 
print "${now}" screen no append post/start_rotating.txt

# Obtain RPM, Times from Input File 'rpm_drum.txt' 
variable input file rpm_drum.txt

# Initial Conditions
variable timeAccel1 equal ${input} # Likely 0 (seconds)
next input 
variable rpmDrum1   equal ${input} # Likely 0 (rpm)
next input

# Convert Initial RPM to Angular Velocity
variable angVel1    equal ${rpmDrum1}*(PI/30) # (rad/s)

# Initial Loop Count
variable count      equal 1


## Drum Rotation Loop
label loop2

# Loop Count
print "----> Drum Rotation Loop Count: ${count}"

# Calibration Imaging Command
include imaging/imaging_calibration.data

# Obtain New RPM and Time
variable timeAccel2 equal ${input} # (seconds)
next input
variable rpmDrum2   equal ${input} # (rpm)
next input

# Convert RPM to Angular Velocity
variable angVel2    equal ${rpmDrum2}*(PI/30) # (rad/s)

# Obtain Change in Time, Calculate Corresponding Run Time
variable deltaTime  equal ${timeAccel2}-${timeAccel1} # (seconds)
variable runsteps   equal round(${deltaTime}/dt)      # (time-steps)

# Current Time-Step
variable imstep10   equal ${now} # (time-steps)

# Angular Velocity
variable omegaiter  equal ${angVel1}+((${angVel2}-${angVel1})*((step-${imstep10})*dt)/${deltaTime})

# Rotate Geometry 
fix movecad1 all move/mesh mesh cad3 rotate/variable origin 0 0 0 axis 0 1 0 &
omega v_omegaiter

if "(${simdim} == 2) && (${periodicbb} == 1)" then "print ''" else &
"fix movecad2 all move/mesh mesh cad4 rotate/variable origin 0 0 0 axis 0 1 0 &
omega v_omegaiter" &
"fix movecad3 all move/mesh mesh cad6 rotate/variable origin 0 0 0 axis 0 1 0 &
omega v_omegaiter"

# Run Simulation, Increment Loop Count
print "----> Rotating Drum Loop Number: ${count}..."
variable count      equal ${count}+1
run ${runsteps}

# Print System Information
info communication time out log 

# Stop Rotation of Geometry
unfix movecad1

if "(${simdim} == 2) && (${periodicbb} == 1)" then "print ''" else &
"unfix movecad2" &
"unfix movecad3"

# New Angular Velocity and Time
variable timeAccel1 equal ${timeAccel2}
variable angVel1    equal ${angVel2}

# Restart Loop
jump in.rotatingdrum loop2

# End of Drum Rotation Loop
label endloop2


## Record current time-step to file 
print "${now}" screen no append post/start_rotating.txt



################################################################################
################################################################################
## Simulation Finished
################################################################################
################################################################################
print "----> Simulation Finished!"
