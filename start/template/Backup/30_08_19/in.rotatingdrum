### Rotating Drum Simulation
# This simulation involves the filling of a rotary drum with a binary mixture.
# The mixture is initially segregated by a divider. The drum is rotated
# horizontally and vibrated to spread the particles equally along the length of 
# the drum. The divider is removed before the drum is rotated along its 
# longitudinal axis 


#echo log
#modify_timing on
### Importing Variables from inputs.text
print "----> Importing Variables..."
variable input file inputs.txt
## Simulation
next input
variable simdim          equal $(v_input)
next input
variable periodicbb         equal $(v_input)
next input
next input 
variable autoproc       string $(v_input)
next input
variable xproc           equal $(v_input)
next input
variable yproc           equal $(v_input)
next input
variable zproc           equal $(v_input)

## DEM Parameters
next input
variable ts              equal $(v_input)
next input
variable neighdim        equal $(v_input)
next input
variable thermostep      equal $(v_input)

## Particle Insertion
next input
variable insertionrate   equal $(v_input)
next input
variable volfracglass    equal $(v_input)
next input
variable volfracPP       equal $(v_input)

next input
variable fillingdegree   equal $(v_input)
next input
variable porosity        equal $(v_input)

## Material Properties

# Particle Radius
next input
variable radglass        equal $(v_input)
next input
variable radPP           equal $(v_input)

# Particle Density
next input
variable denglass        equal $(v_input)
next input
variable denPP           equal $(v_input)

# Young's Modulus
next input
variable ymglass         equal $(v_input)
next input
variable ymPP            equal $(v_input)
next input
variable ymPMMA          equal $(v_input)

# Poisson's Ratio
next input
variable prglass         equal $(v_input)
next input
variable prPP            equal $(v_input)
next input
variable prPMMA          equal $(v_input)

# Coefficient of Restitution (COR)
next input
variable restglassglass  equal $(v_input)
next input
variable restglassPP     equal $(v_input)
next input
variable restglassPMMA   equal $(v_input)
next input
variable restPPPP        equal $(v_input)
next input
variable restPPPMMA      equal $(v_input)
next input
variable restPMMAPMMA    equal $(v_input)

# Coefficient of Friction (COF)
next input
variable frictglassglass equal $(v_input)
next input
variable frictglassPP    equal $(v_input)
next input
variable frictglassPMMA  equal $(v_input)
next input
variable frictPPPP       equal $(v_input)
next input
variable frictPPPMMA     equal $(v_input)
next input
variable frictPMMAPMMA   equal $(v_input)

# Coefficient of Rolling Friction (CRF)
next input
variable rollglassglass  equal $(v_input)
next input
variable rollglassPP     equal $(v_input)
next input
variable rollglassPMMA   equal $(v_input)
next input
variable rollPPPP        equal $(v_input)
next input
variable rollPPPMMA      equal $(v_input)
next input
variable rollPMMAPMMA    equal $(v_input)

## Geometry

# Sizing Domain
next input
variable lengthdrum3D    equal $(v_input)
next input
variable lengthdrum2D    equal $(v_input)
next input
variable widthdrum       equal $(v_input)
next input
variable iddrum          equal $(v_input)
next input
variable thickcap        equal $(v_input)

# Rotational Mixing of Drum
next input
variable rpmMix          equal $(v_input)
next input
variable numrotMix       equal $(v_input)

# Vibration of Drum
next input
variable xamplitude      equal $(v_input)
next input
variable yamplitude      equal $(v_input)
next input
variable zamplitude      equal $(v_input)
next input
variable frequencyvib    equal $(v_input)
next input
variable timevib         equal $(v_input)
next input
variable cyclevib        equal $(v_input)

# Rotation of Drum
next input
variable angularaccel    equal $(v_input)
next input
variable rpm             equal $(v_input)
next input
variable numrot          equal $(v_input)
next input
variable acctime         equal $(v_input)

# Other
next input
variable rottime         equal $(v_input)
next input
variable dividerspeed    equal $(v_input)

print "2D = ${lengthdrum2D}"
print "3D = ${lengthdrum3D}"

### Initialisation

## Preliminaries
atom_style  sphere          # Style of atoms in simulation
if "(${simdim} == 2) && (${periodicbb} == 1)" then "boundary f p f" &
	else "boundary f f f" 
# boundary f f f -> non-periodic, fixed boundary, f p f -> periodic in y
newton	    off             # Off for DEM sim with only short-range interactions
communicate single vel yes  # Style of inter-processor comms
units       si              # Selects units for simulation (ie kg, m, s)

variable atommod equal $(v_neighdim)/2
atom_modify sort 1000 $(v_atommod)


#info variables

# Drum Length
if "${simdim} == 2" then "variable lengthdrum equal ${lengthdrum2D}" else &
"variable lengthdrum equal ${lengthdrum3D}"

# Processor Layout
if "$(v_autoproc) == 1" then "processors * * *" &
elif "$(v_xproc) == 0"       "processors * $(v_yproc) $(v_zproc)" &
elif "$(v_yproc) == 0"       "processors $(v_xproc) * $(v_zproc)" &
elif "$(v_zproc) == 0"       "processors $(v_xproc) $(v_yproc) *" &
else "processors $(v_xproc) $(v_yproc) $(v_zproc)"

# Number of Particles Related to Filling Degree
# (Assumes radius of both particle types are the same)

variable totalparticles equal (3/4)*($(v_fillingdegree)*(1-$(v_porosity)))*(((($(v_iddrum)/2)^2)*$(v_lengthdrum))/($(v_radPP)^3))
print  $(v_totalparticles)
variable numglass equal floor($(v_volfracglass)*$(v_totalparticles))
print  $(v_numglass)
variable numPP equal floor($(v_volfracPP)*$(v_totalparticles))
print  ${numPP}

## Declaring Domain

# Domain Limits
variable limit1    equal ($(v_widthdrum)/2)+0.03
variable limit2    equal $(v_thickcap)
variable limit3    equal $(v_lengthdrum)+0.1
variable limit4    equal $(v_thickcap)+$(v_yamplitude)+0.01
variable limit5    equal $(v_lengthdrum)+$(v_yamplitude)

variable limittest equal $(v_lengthdrum)+$(v_thickcap)+0.01

if "$(v_limit1) > $(v_limittest)" then "variable limit6 equal $(v_limit1)" &
else "variable limit6 equal $(v_limittest)"

#variable limit6 equal $(v_lengthdrum)+$(v_thickcap)+0.01
variable limit7    equal $(v_thickcap)+$(v_yamplitude)+$(v_lengthdrum)+0.01
variable limit8    equal $(v_lengthdrum)+0.02

# Limits for periodic boundary box
variable limit9    equal ${lengthdrum}
variable limit10   equal 0

# Domain
region domain block -$(v_limit1) $(v_limit1) -$(v_limit1) $(v_limit1) &
-$(v_limit2) $(v_limit3) units box # x,x,y,y,z,z (m)
create_box	3 domain # 3 different material types (PP, glass, PMMA) 


## Neighbour Listing
neighbor     $(v_neighdim) bin # Size of neighbour list, default for SI 0.001 m.
# Algorithm used to build list is bin, scales with # of atoms/# of processors
neigh_modify delay 0 # How often neighbour list is calcuated 



### Setup (Property order --> PP, glass, PMMA)

## Material and Interaction Properties
fix m1 all property/global youngsModulus peratomtype &
$(v_ymPP) $(v_ymglass) $(v_ymPMMA)

fix m2 all property/global poissonsRatio peratomtype &
$(v_prPP) $(v_prglass) $(v_prPMMA)

fix m3 all property/global coefficientRestitution peratomtypepair 3 &
$(v_restPPPP)    $(v_restglassPP)    $(v_restPPPMMA) &
$(v_restglassPP) $(v_restglassglass) $(v_restglassPMMA) & 
$(v_restPPPMMA)  $(v_restglassPMMA)  $(v_restPMMAPMMA)

fix m4 all property/global coefficientFriction peratomtypepair 3 &
$(v_frictPPPP)    $(v_frictglassPP)    $(v_frictPPPMMA) &
$(v_frictglassPP) $(v_frictglassglass) $(v_frictglassPMMA) &
$(v_frictPPPMMA)  $(v_frictglassPMMA)  $(v_frictPMMAPMMA)

fix m5 all property/global coefficientRollingFriction peratomtypepair 3 &
$(v_rollPPPP)    $(v_rollglassPP)    $(v_rollPPPMMA) &
$(v_rollglassPP) $(v_rollglassglass) $(v_rollglassPMMA) &
$(v_rollPPPMMA)  $(v_rollglassPMMA)  $(v_rollPMMAPMMA)

hard_particles yes # Allow for Youngs Modulus > 1e9 Pa
variable diaglass equal 2*${radglass}
variable diaPP    equal 2*${radPP}

## Particle Insertion 
fix pts1 all particletemplate/sphere 123457   atom_type 1 density constant &
$(v_denPP)    radius constant $(v_radPP)    # PP particles
fix pts2 all particletemplate/sphere 15485863 atom_type 2 density constant &
$(v_denglass) radius constant $(v_radglass) # Glass particles


## Particle Distributions
fix pdd1 all particledistribution/discrete 8593931  1 pts1 1.0
fix pdd2 all particledistribution/discrete 15485867 1 pts2 1.0


if "${simdim} == 2" then "variable particleVel equal -0.02" else &
	"variable particleVel equal -1"


## Region of Insertion
fix cad1 all mesh/surface file meshes/factory_input1.stl type 3 scale 0.025 &
move 0.035 0 $(v_limit8) 
fix ins1 all insert/stream seed 32452843 distributiontemplate pdd1 &
nparticles $(v_numPP) particlerate $(v_insertionrate) overlapcheck yes &
vel constant 0 0 ${particleVel} insertion_face cad1 extrude_length 0.05

fix cad2 all mesh/surface file meshes/factory_input2.stl type 3 scale 0.025 &
move -0.035 0 $(v_limit8) 
fix ins2 all insert/stream seed 32452843 distributiontemplate pdd2 &
nparticles $(v_numglass) particlerate $(v_insertionrate) overlapcheck yes &
vel constant 0 0 ${particleVel} insertion_face cad2 extrude_length 0.05


## Import Mesh from CAD file as atom type 3 (PMMA)
if "${simdim} == 2" then "fix cad3 all mesh/surface &
	file meshes/rotating_drum2D.stl type 3 scale 0.001" else &
	"fix cad3 all mesh/surface file meshes/rotating_drum.stl &
	type 3 scale 0.001"


fix cad4 all mesh/surface file meshes/bottom_lid_with_slit.stl type 3 &
scale 0.001 move 0 0 -0.01

if "${simdim} == 2" then "fix cad5 all mesh/surface file meshes/divider2D.stl &
	type 3 scale 0.001 move 0 0 0" else &
	"fix cad5 all mesh/surface file meshes/divider.stl type 3 scale 0.001 &
	move 0 0 0"

fix cad6 all mesh/surface file meshes/top_lid.stl type 3 scale 0.001 &
move 0 0 $(v_lengthdrum)


## Declaring Geometry as a Granular Wall
fix geometry all wall/gran model hertz tangential history &
rolling_friction epsd2 mesh n_meshes 3 meshes cad3 cad4 cad5


## Defining Physics
pair_style gran model hertz tangential history cohesion off rolling_friction epsd2 surface default
# Hertz without cohesion inc rolling friction
pair_coeff * *       # Indicate all particles interact via granular potential


## Detailed Settings

# Integrator
fix integrate all nve/sphere # Constant number, volume, energy

# Gravity
fix grav all gravity 9.81 vector 0.0 0.0 -1.0 # Gravity in z-direction

# Time Step
timestep $(v_ts) # less than, equal to 20% of Raleigh time step

# Thermodynamic Output Settings
variable        thermofreq equal round($(v_thermostep)/$(v_ts))
compute		cp1 all erotate/sphere
thermo_style	custom step atoms ke c_cp1 spcpu vol
thermo          $(v_thermofreq)
thermo_modify	lost warn norm no flush yes
# Check for lost atoms, thermo not normalised

# Saving variable with current timestep
variable now equal step

# Checking Timestep and Initialise Dump File
fix ts_check all check/timestep/gran 1 0.01 0.01
run 1
unfix ts_check

# Recording Rotational Velocity of Drum
variable omegaiter equal 0 # Initial rotational speed of drum

# Initial Conditions Imaging Information
write_dump all custom/vtk post/particles_*.vtk &
id type radius x y z vx vy vz fx fy fz omegax omegay omegaz tqx tqy tqz
write_dump all mesh/stl post/dump_factory_*.stl cad1 cad2
write_dump all mesh/stl post/dump_drum_*.stl cad3 cad5
write_dump all mesh/stl post/dump_ends_*.stl cad4
print "$(v_omegaiter)" screen no append post/drum_rotational_velocity.txt

# Creating Periodic Imaging Information
dump dumpstl0 all custom/vtk $(v_thermofreq) post/particles_*.vtk &
id type radius x y z vx vy vz fx fy fz omegax omegay omegaz tqx tqy tqz
dump dumpstl2 all mesh/stl   $(v_thermofreq) post/dump_factory_*.stl cad1 cad2
dump dumpstl3 all mesh/stl   $(v_thermofreq) post/dump_drum_*.stl cad3 cad5
dump dumpstl4 all mesh/stl   $(v_thermofreq) post/dump_ends_*.stl cad4 

# Writing Drum Rotational Speed to File
fix rotdrum all print $(v_thermofreq) "$(v_omegaiter)" screen no &
title none append post/drum_rotational_velocity.txt


## Initial Imaging Information
include imaging/imaging1.data



### Execution

## Filling Drum
print "----> Filling Drum..."
if "$(v_numglass) > $(v_numPP)" then "variable num equal $(v_numglass)" &
	else "variable num equal $(v_numPP)"
variable runsteps1 equal &
	round((0.2/$(v_ts))+(($(v_numPP)/$(v_insertionrate))/$(v_ts)))
run $(v_runsteps1)
info communication time out log 


## Checking if Particles all contained in Drum
if "${simdim} == 2" then "variable runsteps2 equal round(1/${ts})" else &
	"variable runsteps2 equal round(0.1/${ts})" # 1 or 0.1 seconds
variable position1 equal bound(all,zmax)

label loop1 # Jump here until particles are all inside the drum
	print "----> Checking Particle Position..."
	if "$(v_position1) < $(v_lengthdrum)" &
	then "print '----> All particles in drum...' " &
	"jump in.rotatingdrum endloop1"
	print "----> Particles not all in drum, continuing loop..."	
	run $(v_runsteps2) # Check position again in 1 or 0.1 seconds
jump in.rotatingdrum loop1
label endloop1


## Adding Top Lid to Drum
print "----> Adding Lid..."
unfix geometry
undump dumpstl2
undump dumpstl3
undump dumpstl4

fix geometry all wall/gran model hertz tangential history &
rolling_friction cdt mesh n_meshes 4 meshes cad3 cad4 cad5 cad6
dump dumpstl5 all mesh/stl $(v_thermofreq) post/dump_drum_*.stl cad3 cad5
dump dumpstl6 all mesh/stl $(v_thermofreq) post/dump_ends_*.stl cad4 cad6

unfix ins2
unfix ins1
unfix cad1
unfix cad2


## Settling Time
variable settle1 equal 1.5 # Time given for particles to settle (s)


## New Imaging Information (2)
include imaging/imaging2.data


## Allowing Particles to Settle 
print "----> Allowing Particles to Settle..."
variable runsteps3 equal round(${settle1}/$(v_ts))  
run $(v_runsteps3)
info communication time out log 


## Changing Domain Size
change_box all y final -$(v_limit6) $(v_limit1) units box 
change_box all z final -$(v_limit1) $(v_limit3) units box


## New Imaging Information (3)
include imaging/imaging3.data


## Creating Restart File
print "----> Writing Restart File..."
write_restart restart/1_filled_drum.restart


## Rotating Drum
print "----> Rotating Drum Flat..."
variable omega1 equal PI/(2*$(v_rottime)) # (rad/s)

# Moving Geometry
fix movecad1 all move/mesh mesh cad3 rotate/variable origin 0 0 0 &
axis 1 0 0 omega v_omega1
fix movecad2 all move/mesh mesh cad4 rotate/variable origin 0 0 0 &
axis 1 0 0 omega v_omega1
fix movecad3 all move/mesh mesh cad5 rotate/variable origin 0 0 0 &
axis 1 0 0 omega v_omega1
fix movecad4 all move/mesh mesh cad6 rotate/variable origin 0 0 0 &
axis 1 0 0 omega v_omega1


## Runtime
variable runsteps4 equal round($(v_rottime)/$(v_ts))

# Run Sim
run $(v_runsteps4)
info communication time out log 


## Stopping Movement
unfix movecad1 
unfix movecad2 
unfix movecad3 
unfix movecad4

run 10

## Changing Domain Size
change_box all x final -$(v_limit1) $(v_limit1) units box 
change_box all y final -$(v_limit7) $(v_limit4) units box
change_box all z final -$(v_limit1) $(v_limit1) units box


## New Imaging Information (4)
include imaging/imaging4.data


## Allowing Particles to Settle 
print "----> Allowing Particles to Settle..."
variable runsteps5 equal round(1/$(v_ts)) # 1 second to settle 
run $(v_runsteps5)
info communication time out log 


## Creating Restart File
print "----> Writing Restart File..."
write_restart restart/2_pre_vibrate.restart

### Levelling Particles
# To level the particles in the drum, the drum is first rotated for 5
# revolutions at a fixed rpm. Once this is completed, the drum is vibrated
# back and forth along its longitudinal axis.

## Rotating Drum
print "----> Rotating drum to level particles..." 

variable periodrotMix equal 60/${rpmMix}

fix movecad5 all move/mesh mesh cad3 rotate origin 0 0 0 axis 0 1 0 & 
period ${periodrotMix}
fix movecad6 all move/mesh mesh cad4 rotate origin 0 0 0 axis 0 1 0 & 
period ${periodrotMix}
fix movecad7 all move/mesh mesh cad5 rotate origin 0 0 0 axis 0 1 0 & 
period ${periodrotMix}
fix movecad8 all move/mesh mesh cad6 rotate origin 0 0 0 axis 0 1 0 & 
period ${periodrotMix}

variable runsteps6 equal round((${periodrotMix}*${numrotMix})/${ts}) 
run $(v_runsteps6)
info communication time out log 

# Stopping Rotational Mixing
unfix movecad5
unfix movecad6
unfix movecad7
unfix movecad8

variable runsteps7 equal round(0.5/${ts}) # Let particles settle for 0.5 s
run ${runsteps7}

## Vibrating Drum
print "----> Vibrating Drum..."
variable periodvib equal 1/$(v_frequencyvib)

fix movecad9 all move/mesh mesh cad3 wiggle amplitude $(v_xamplitude) &
$(v_yamplitude) $(v_zamplitude) period $(v_periodvib)
fix movecad10 all move/mesh mesh cad4 wiggle amplitude $(v_xamplitude) &
$(v_yamplitude) $(v_zamplitude) period $(v_periodvib)
fix movecad11 all move/mesh mesh cad5 wiggle amplitude $(v_xamplitude) &
$(v_yamplitude) $(v_zamplitude) period $(v_periodvib)
fix movecad12 all move/mesh mesh cad6 wiggle amplitude $(v_xamplitude) &
$(v_yamplitude) $(v_zamplitude) period $(v_periodvib)

variable runsteps8 equal round($(v_cyclevib)*$(v_periodvib)/$(v_ts))

run $(v_runsteps8)
info communication time out log 

# Stopping Vibration
unfix movecad9
unfix movecad10
unfix movecad11
unfix movecad12


## Settling Time
variable settle2 equal 1.5 # Time given for particles to settle (s)


## New Imaging Information (5)
include imaging/imaging5.data


## Allowing Particles to Settle 
print "----> Allowing Particles to Settle..."
variable runsteps9 equal round(${settle2}/$(v_ts)) 
run $(v_runsteps9)
info communication time out log 


## Changing Domain Size
change_box all y final -$(v_limit7) $(v_limit5) units box


## Creating Restart File
print "----> Writing Restart File..."
write_restart restart/3_post_vibrate.restart


## New Imaging Information (6)
include imaging/imaging6.data


## Removing Divider 
print "----> Removing Divider..."

run 10

fix movecad13 all move/mesh mesh cad5 linear 0 $(v_dividerspeed) 0 

variable divdist equal $(v_lengthdrum)
variable runsteps10 equal round(($(v_divdist)/$(v_dividerspeed))/$(v_ts)) 
run $(v_runsteps10)
info communication time out log 

# Stopping Divider Movement
unfix movecad13
unfix geometry
undump dumpstl5
undump dumpstl6
unfix cad5
#fix geometry all wall/gran model hertz tangential history &
#rolling_friction cdt mesh n_meshes 3 meshes cad3 cad4 cad6
#dump dumpstl7 all mesh/stl $(v_thermofreq) post/dump_drum_*.stl cad3
#dump dumpstl8 all mesh/stl $(v_thermofreq) post/dump_ends_*.stl cad4 cad6

#run 1

## Changing Domain Size
#change_box all y final -$(v_limit7) $(v_limit4) units box

if "(${simdim} == 2) && (${periodicbb} == 1)" then &
"unfix cad4" &
"unfix cad6" &
"fix geometry all wall/gran model hertz tangential history &
rolling_friction cdt mesh n_meshes 1 meshes cad3" &
"dump dumpstl7 all mesh/stl $(v_thermofreq) post/dump_drum_*.stl cad3" &
"run 1" &
"change_box all y final -$(v_limit9) $(v_limit10) units box" &
else "fix geometry all wall/gran model hertz tangential history &
rolling_friction cdt mesh n_meshes 3 meshes cad3 cad4 cad6" &
"dump dumpstl7 all mesh/stl $(v_thermofreq) post/dump_drum_*.stl cad3" &
"dump dumpstl8 all mesh/stl $(v_thermofreq) post/dump_ends_*.stl cad4 cad6" &
"run 1" &
"change_box all y final -$(v_limit7) $(v_limit4) units box"


# still need to unfix old geometry and create new dump files

#if "${simdim} == 2" then "variable test1 equal 1" &
#"variable test2 equal 2" &
#"print 'success!'"


## Settling Time
variable settle3 equal 1 # Time given for particles to settle (s)


## New Imaging Information (7)
include imaging/imaging7.data


## Allowing Particles to Settle 
print "----> Allowing Particles to Settle..."
variable runsteps11 equal round(${settle3}/$(v_ts))
run $(v_runsteps11)
info communication time out log 


## New Imaging Information (7)
include imaging/imaging8.data


## Creating Restart File
print "----> Writing Restart File..."
write_restart restart/4_exp_ready.restart


#---------------------------------------
## Alternative Method to Simulate Accelerating Drum
print "----> Accelerating Drum..."

variable runsteps12 equal round(v_acctime/dt)
variable imstep10 equal ${now} # Current timestep

variable omegaiter equal ((PI*${rpm})/30)*(((v_now-${imstep10})*dt)/${acctime})

fix movecad14 all move/mesh mesh cad3 rotate/variable origin 0 0 0 axis 0 1 0 &
omega v_omegaiter
fix movecad15 all move/mesh mesh cad4 rotate/variable origin 0 0 0 axis 0 1 0 &
omega v_omegaiter
fix movecad16 all move/mesh mesh cad6 rotate/variable origin 0 0 0 axis 0 1 0 &
omega v_omegaiter

run $(v_runsteps12)

unfix movecad14
unfix movecad15
unfix movecad16
print  $(v_omegaiter)
variable omegaiter delete


#-----------------------------------------

## Accelerating Drum
#print "----> Accelerating Drum..."
#variable n equal 1000 # Breaking acceleration into sections
#variable LoopVar loop $n
#variable runsteps12 equal round($(v_acctime)/($n*$(v_ts)))

# Acceleration Loop

#label loop2
#variable omegaiter equal ((PI*$(v_rpm))/30)*(($(v_LoopVar)/$n)*$(v_acctime))

#fix movecad14 all move/mesh mesh cad3 rotate/variable origin 0 0 0 axis 0 1 0 &
#omega v_omegaiter
#fix movecad15 all move/mesh mesh cad4 rotate/variable origin 0 0 0 axis 0 1 0 &
#omega v_omegaiter
#fix movecad16 all move/mesh mesh cad6 rotate/variable origin 0 0 0 axis 0 1 0 &
#omega v_omegaiter

#run $(v_runsteps12) post no

#unfix movecad14
#unfix movecad15
#unfix movecad16

#print  $(v_omegaiter)
#variable omegaiter delete

#next LoopVar
#jump in.rotatingdrum loop2
#label endloop2

info communication time out log


## Constant Rotation Speed 
print "----> Rotating Drum at Constant Speed..."
variable periodrot equal 60/$(v_rpm)

variable omegaiter equal (2*PI)/$(v_periodrot)

fix movecad17 all move/mesh mesh cad3 rotate origin 0 0 0 axis 0 1 0 & 
period $(v_periodrot)
fix movecad18 all move/mesh mesh cad4 rotate origin 0 0 0 axis 0 1 0 & 
period $(v_periodrot)
fix movecad19 all move/mesh mesh cad6 rotate origin 0 0 0 axis 0 1 0 & 
period $(v_periodrot)

variable runsteps13 equal round(($(v_periodrot)*$(v_numrot))/$(v_ts)) 
run $(v_runsteps13)
info communication time out log 


## Creating Restart File
print "----> Writing Restart File..."
write_restart restart/5_exp_finished.restart


print "----> Simulation Finished!"

print "zdist1 = ${zdist1}"
print "zdist2 = ${zdist2}" 
print "zdist3 = ${zdist3}" 
print "zdist4 = ${zdist4}"
print "zdist5 = ${zdist5}"
print "zdist6 = ${zdist6}"
print "zdist7 = ${zdist7}"
print "zdist8 = ${zdist8}"

