### Restart File for experimentally ready apparatus


### Importing Variables from inputs.text
print "----> Importing Variables..."
variable input file inputs.txt

## Simulation
next input
variable simdim equal $(v_input)
next input
next input 
variable autoproc string $(v_input)
next input
variable xproc equal $(v_input)
next input
variable yproc equal $(v_input)
next input
variable zproc equal $(v_input)

## DEM Parameters
next input
variable ts equal $(v_input)
next input
variable neighdim equal $(v_input)
next input
variable thermostep equal $(v_input)

## Particle Insertion
next input
variable insertionrate equal $(v_input)
next input
variable volfracglass equal $(v_input)
next input
variable volfracPP equal $(v_input)

next input
variable fillingdegree equal $(v_input)
next input
variable porosity equal $(v_input)

## Material Properties

# Particle Radius
next input
variable radglass equal $(v_input)
next input
variable radPP equal $(v_input)

# Particle Density
next input
variable denglass equal $(v_input)
next input
variable denPP equal $(v_input)

# Young's Modulus
next input
variable ymglass equal $(v_input)
next input
variable ymPP equal $(v_input)
next input
variable ymPMMA equal $(v_input)

# Poisson's Ratio
next input
variable prglass equal $(v_input)
next input
variable prPP equal $(v_input)
next input
variable prPMMA equal $(v_input)

# Coefficient of Restitution (COR)
next input
variable restglassglass equal $(v_input)
next input
variable restglassPP equal $(v_input)
next input
variable restglassPMMA equal $(v_input)
next input
variable restPPPP equal $(v_input)
next input
variable restPPPMMA equal $(v_input)
next input
variable restPMMAPMMA equal $(v_input)

# Coefficient of Friction (COF)
next input
variable frictglassglass equal $(v_input)
next input
variable frictglassPP equal $(v_input)
next input
variable frictglassPMMA equal $(v_input)
next input
variable frictPPPP equal $(v_input)
next input
variable frictPPPMMA equal $(v_input)
next input
variable frictPMMAPMMA equal $(v_input)

# Coefficient of Rolling Friction (CRF)
next input
variable rollglassglass equal $(v_input)
next input
variable rollglassPP equal $(v_input)
next input
variable rollglassPMMA equal $(v_input)
next input
variable rollPPPP equal $(v_input)
next input
variable rollPPPMMA equal $(v_input)
next input
variable rollPMMAPMMA equal $(v_input)

## Geometry

# Sizing Domain
next input
variable lengthdrum equal $(v_input)
next input
variable widthdrum equal $(v_input)
next input
variable iddrum equal $(v_input)
next input
variable thickcap equal $(v_input)

# Vibration of Drum
next input
variable xamplitude equal $(v_input)
next input
variable yamplitude equal $(v_input)
next input
variable zamplitude equal $(v_input)
next input
variable frequencyvib equal $(v_input)
next input
variable timevib equal $(v_input)
next input
variable cyclevib equal $(v_input)

# Rotation of Drum
next input
variable angularaccel equal $(v_input)
next input
variable rpm equal $(v_input)
next input
variable numrot equal $(v_input)
next input
variable acctime equal $(v_input)

# Other
next input
variable rottime equal $(v_input)
next input
variable dividerspeed equal $(v_input)



### Initialisation
read_restart restart/1_filled_drum.restart

## Preliminaries 
newton	    off             # Off for DEM sim with only short-range interactions
communicate single vel yes  # Style of inter-processor comms

variable atommod equal $(v_neighdim)/2
atom_modify sort 1000 $(v_atommod)

# Number of Particles Related to Filling Degree
# (Assumes radius of both particle types are the same)

variable totalparticles equal (3/4)*($(v_fillingdegree)*(1-$(v_porosity)))*(((($(v_iddrum)/2)^2)*$(v_lengthdrum))/($(v_radPP)^3))
print  $(v_totalparticles)
variable numglass equal floor($(v_volfracglass)*$(v_totalparticles))
print  $(v_numglass)
variable numPP equal floor($(v_volfracPP)*$(v_totalparticles))
print  $(v_numPP)

## Declaring Domain

# Domain Limits
variable limit1 equal ($(v_widthdrum)/2)+0.03
variable limit2 equal $(v_thickcap)
variable limit3 equal $(v_lengthdrum)+0.1
variable limit4 equal $(v_thickcap)+$(v_yamplitude)+0.01
variable limit5 equal $(v_lengthdrum)+$(v_yamplitude)

variable limittest equal $(v_lengthdrum)+$(v_thickcap)+0.01
if "$(v_limit1) > $(v_limittest)" then "variable limit6 equal $(v_limit1)" &
else "variable limit6 equal $(v_limittest)"

#variable limit6 equal $(v_lengthdrum)+$(v_thickcap)+0.01
variable limit7 equal $(v_thickcap)+$(v_yamplitude)+$(v_lengthdrum)
variable limit8 equal $(v_lengthdrum)+0.02


#Domain
region domain block -$(v_limit1) $(v_limit1) -$(v_limit6) $(v_limit1) &
-$(v_limit1) $(v_limit3) units box # x,x,y,y,z,z (m)


## Neighbour Listing
neighbor     $(v_neighdim) bin # Size of neighbour list, default for SI 0.001 m.
# Algorithm used to build list is bin, scales with # of atoms/# of processors
neigh_modify delay 0 # How often neighbour list is calcuated 


### Setup (Property order --> PP, glass, PMMA)

## Material and Interaction Properties
fix m1 all property/global youngsModulus peratomtype &
$(v_ymPP) $(v_ymglass) $(v_ymPMMA)

fix m2 all property/global poissonsRatio peratomtype &
$(v_prPP) $(v_prglass) $(v_prPMMA)

fix m3 all property/global coefficientRestitution peratomtypepair 3 &
$(v_restPPPP)    $(v_restglassPP)    $(v_restPPPMMA) &
$(v_restglassPP) $(v_restglassglass) $(v_restglassPMMA) & 
$(v_restPPPMMA)  $(v_restglassPMMA)  $(v_restPMMAPMMA)

fix m4 all property/global coefficientFriction peratomtypepair 3 &
$(v_frictPPPP)    $(v_frictglassPP)    $(v_frictPPPMMA) &
$(v_frictglassPP) $(v_frictglassglass) $(v_frictglassPMMA) &
$(v_frictPPPMMA)  $(v_frictglassPMMA)  $(v_frictPMMAPMMA)

fix m5 all property/global coefficientRollingFriction peratomtypepair 3 &
$(v_rollPPPP)    $(v_rollglassPP)    $(v_rollPPPMMA) &
$(v_rollglassPP) $(v_rollglassglass) $(v_rollglassPMMA) &
$(v_rollPPPMMA)  $(v_rollglassPMMA)  $(v_rollPMMAPMMA)

hard_particles yes # Allow for Youngs Modulus > 1e9 Pa


## Particle Insertion 
fix pts1 all particletemplate/sphere 123457   atom_type 1 density constant &
$(v_denPP)    radius constant $(v_radPP)    # PP particles
fix pts2 all particletemplate/sphere 15485863 atom_type 2 density constant &
$(v_denglass) radius constant $(v_radglass) # Glass particles


## Particle Distributions
fix pdd1 all particledistribution/discrete 8593931  1 pts1 1.0
fix pdd2 all particledistribution/discrete 15485867 1 pts2 1.0


## Import Mesh from CAD file as atom type 3 (PMMA)
fix cad3 all mesh/surface file meshes/rotating_drum.stl type 3 scale 0.001 
fix cad4 all mesh/surface file meshes/bottom_lid_with_slit.stl type 3 &
scale 0.001 move 0 0 -0.01
fix cad5 all mesh/surface file meshes/divider.stl type 3 scale 0.001 &
move 0 0 0
fix cad6 all mesh/surface file meshes/top_lid.stl type 3 scale 0.001 &
move 0 0 $(v_lengthdrum)


## Declaring Geometry as a Granular Wall
fix geometry all wall/gran model hertz tangential history &
rolling_friction cdt mesh n_meshes 4 meshes cad3 cad4 cad5 cad6


## Defining Physics
pair_style gran model hertz tangential history &
rolling_friction cdt # Hertz without cohesion inc rolling friction
pair_coeff * *       # Indicate all particles interact via granular potential


## Detailed Settings

# Integrator
fix integrate all nve/sphere # Constant number, volume, energy

# Gravity
fix grav all gravity 9.81 vector 0.0 0.0 -1.0 # Gravity in z-direction

# Time Step
timestep $(v_ts) # less than, equal to 20% of Raleigh time step

# Thermodynamic Output Settings
variable        thermofreq equal round($(v_thermostep)/$(v_ts))
compute		cp1 all erotate/sphere
thermo_style	custom step atoms ke c_cp1 spcpu vol
thermo          $(v_thermofreq)
thermo_modify	lost warn norm no flush yes
# Check for lost atoms, thermo not normalised


# Create Imaging Information
run 1

dump dumpstl0 all custom/vtk $(v_thermofreq) post/particles_*.vtk &
id type radius x y z vx vy vz fx fy fz omegax omegay omegaz tqx tqy tqz
dump dumpstl5 all mesh/stl $(v_thermofreq) post/dump_drum_*.stl cad3 cad5
dump dumpstl6 all mesh/stl $(v_thermofreq) post/dump_ends_*.stl cad4 cad6


## Rotating Drum
print "----> Rotating Drum Flat..."
variable omega1 equal PI/(2*$(v_rottime)) # (rad/s)

# Moving Geometry
fix movecad1 all move/mesh mesh cad3 rotate/variable origin 0 0 0 &
axis 1 0 0 omega v_omega1
fix movecad2 all move/mesh mesh cad4 rotate/variable origin 0 0 0 &
axis 1 0 0 omega v_omega1
fix movecad3 all move/mesh mesh cad5 rotate/variable origin 0 0 0 &
axis 1 0 0 omega v_omega1
fix movecad4 all move/mesh mesh cad6 rotate/variable origin 0 0 0 &
axis 1 0 0 omega v_omega1

variable runsteps4 equal round($(v_rottime)/$(v_ts))
run $(v_runsteps4)
info communication time out log 

# Stopping Movement
unfix movecad1 
unfix movecad2 
unfix movecad3 
unfix movecad4


## Changing Domain Size
change_box all x final -$(v_limit1) $(v_limit1) & 
y final -$(v_limit7) $(v_limit4) &
z final -$(v_limit1) $(v_limit1) units box


## Allowing Particles to Settle 
print "----> Allowing Particles to Settle..."
variable runsteps5 equal round(1/$(v_ts)) # 1 second to settle 
run $(v_runsteps5)
info communication time out log 


## Creating Restart File
print "----> Writing Restart File..."
write_restart restart/2_pre_vibrate.restart

## Vibrating Drum
print "----> Vibrating Drum..."
variable periodvib equal 1/$(v_frequencyvib)

fix movecad5 all move/mesh mesh cad3 wiggle amplitude $(v_xamplitude) &
$(v_yamplitude) $(v_zamplitude) period $(v_periodvib)
fix movecad6 all move/mesh mesh cad4 wiggle amplitude $(v_xamplitude) &
$(v_yamplitude) $(v_zamplitude) period $(v_periodvib)
fix movecad7 all move/mesh mesh cad5 wiggle amplitude $(v_xamplitude) &
$(v_yamplitude) $(v_zamplitude) period $(v_periodvib)
fix movecad8 all move/mesh mesh cad6 wiggle amplitude $(v_xamplitude) &
$(v_yamplitude) $(v_zamplitude) period $(v_periodvib)

variable runsteps6 equal round($(v_cyclevib)*$(v_periodvib)/$(v_ts))


#variable runsteps6 equal round($(v_timevib)/$(v_ts))
run $(v_runsteps6)
info communication time out log 

# Stopping Vibration
unfix movecad5
unfix movecad6
unfix movecad7
unfix movecad8


## Allowing Particles to Settle 
print "----> Allowing Particles to Settle..."
variable runsteps7 equal round(1.5/$(v_ts)) # 1.5 seconds to settle 
run $(v_runsteps7)
info communication time out log 


## Changing Domain Size
change_box all y final -$(v_limit7) $(v_limit5) units box


## Creating Restart File
print "----> Writing Restart File..."
write_restart restart/3_post_vibrate.restart


## Removing Divider 
print "----> Removing Divider..."
fix movecad9 all move/mesh mesh cad5 linear 0 $(v_dividerspeed) 0 

variable divdist equal $(v_lengthdrum)
variable runsteps8 equal round(($(v_divdist)/$(v_dividerspeed))/$(v_ts)) 
run $(v_runsteps8)
info communication time out log 

# Stopping Divider Movement
unfix movecad9
unfix geometry
undump dumpstl5
undump dumpstl6
unfix cad5
fix geometry all wall/gran model hertz tangential history &
rolling_friction cdt mesh n_meshes 3 meshes cad3 cad4 cad6
dump dumpstl7 all mesh/stl $(v_thermofreq) post/dump_drum_*.stl cad3
dump dumpstl8 all mesh/stl $(v_thermofreq) post/dump_ends_*.stl cad4 cad6


## Changing Domain Size
change_box all y final -$(v_limit7) $(v_limit4) units box


## Allowing Particles to Settle 
print "----> Allowing Particles to Settle..."
variable runsteps9 equal round(0.5/$(v_ts)) # 0.5 seconds to settle 
run $(v_runsteps9)
info communication time out log 


## Creating Restart File
print "----> Writing Restart File..."
write_restart restart/4_exp_ready.restart


## Accelerating Drum
print "----> Accelerating Drum..."
variable n equal 1000 # Breaking acceleration into sections
variable LoopVar loop $n
variable runsteps10 equal round($(v_acctime)/($n*$(v_ts)))

# Acceleration Loop

label loop2
variable omegaiter equal ((PI*$(v_rpm))/30)*(($(v_LoopVar)/$n)*$(v_acctime))

fix movecad10 all move/mesh mesh cad3 rotate/variable origin 0 0 0 axis 0 1 0 &
omega v_omegaiter
fix movecad11 all move/mesh mesh cad4 rotate/variable origin 0 0 0 axis 0 1 0 &
omega v_omegaiter
fix movecad12 all move/mesh mesh cad6 rotate/variable origin 0 0 0 axis 0 1 0 &
omega v_omegaiter

run $(v_runsteps10) post no

unfix movecad10
unfix movecad11
unfix movecad12

print  $(v_omegaiter)
variable omegaiter delete

next LoopVar
jump in.rotatingdrum loop2
label endloop2

info communication time out log


## Constant Rotation Speed 
print "----> Rotating Drum at Constant Speed..."
variable periodrot equal 60/$(v_rpm)

fix movecad13 all move/mesh mesh cad3 rotate origin 0 0 0 axis 0 1 0 & 
period $(v_periodrot)
fix movecad14 all move/mesh mesh cad4 rotate origin 0 0 0 axis 0 1 0 & 
period $(v_periodrot)
fix movecad115 all move/mesh mesh cad6 rotate origin 0 0 0 axis 0 1 0 & 
period $(v_periodrot)

variable runsteps11 equal round(($(v_periodrot)*$(v_numrot))/$(v_ts)) 
run $(v_runsteps11)
info communication time out log 


## Creating Restart File
print "----> Writing Restart File..."
write_restart restart/5_exp_finished.restart


print "----> Simulation Finished!"
